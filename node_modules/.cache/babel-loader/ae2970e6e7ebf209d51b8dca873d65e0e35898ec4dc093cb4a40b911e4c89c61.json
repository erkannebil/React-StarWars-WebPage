{"ast":null,"code":"var _jsxFileName = \"/Users/nebil/Desktop/Workintech/React-StarWars-WebPage/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport CharacterComponent from \"./components/CharacterComponent.js\";\nimport CharacterObj from \"./fetchData.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [Characters, setCharacters] = useState({});\n  let [pageNo, setPageNo] = useState(1); //?\n\n  // Try to think through what state you'll need for this app before starting. Then build out\n  // the state properties here.\n  useEffect(() => {\n    const fetchDataAndSetCharacters = async () => {\n      try {\n        console.log(pageNo);\n        const data = await CharacterObj.GetPeople(pageNo);\n        console.log(data);\n        /*  \n                \"count\": 82,\n                \"next\": \"https://swapi.dev/api/people/?page=2\",\n                \"previous\": null,\n                \"results\": []\n        */\n        setCharacters(data);\n        // console.log(data);\n      } catch (error) {\n        console.log(\"Error fetching data:\", error);\n      }\n    };\n    fetchDataAndSetCharacters();\n  }, [pageNo]);\n  const next = () => {\n    let tmp_pageNo = pageNo + 1;\n    setPageNo(tmp_pageNo);\n    console.log(pageNo);\n  };\n  const prev = () => {\n    let tmp_pageNo = pageNo - 1;\n    setPageNo(tmp_pageNo);\n    console.log(pageNo);\n  };\n  // Fetch characters from the API in an effect hook. Remember, anytime you have a\n  // side effect in a component, you want to think about which state and/or props it should\n  // sync up with, if any.  \n  //console.log(Characters);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [Characters.previous && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: prev,\n      children: \"PREVIOUS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), Characters.next && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: next,\n      children: \"NEXT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"Header\",\n      children: \"Karakterler\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), Characters.results && Characters.results.map((characters, index) => /*#__PURE__*/_jsxDEV(CharacterComponent, {\n      CharacterData: characters\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"c4nuCBic2Xs/+reMXNsn8wJoQZA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","CharacterComponent","CharacterObj","jsxDEV","_jsxDEV","App","_s","Characters","setCharacters","pageNo","setPageNo","fetchDataAndSetCharacters","console","log","data","GetPeople","error","next","tmp_pageNo","prev","className","children","previous","onClick","fileName","_jsxFileName","lineNumber","columnNumber","results","map","characters","index","CharacterData","_c","$RefreshReg$"],"sources":["/Users/nebil/Desktop/Workintech/React-StarWars-WebPage/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CharacterComponent from \"./components/CharacterComponent.js\";\nimport CharacterObj from \"./fetchData.js\";\n\nconst App = () => {\n  const [Characters, setCharacters] = useState({});\n  let [pageNo, setPageNo] = useState(1); //?\n\n  // Try to think through what state you'll need for this app before starting. Then build out\n  // the state properties here.\n  useEffect(() => {\n\n    \n    const fetchDataAndSetCharacters = async () => {\n      try {\n        console.log(pageNo);\n        const data = await CharacterObj.GetPeople(pageNo);\n        console.log(data);\n/*  \n        \"count\": 82,\n        \"next\": \"https://swapi.dev/api/people/?page=2\",\n        \"previous\": null,\n        \"results\": []\n*/\n        setCharacters(data);\n       // console.log(data);\n      } catch (error) {\n        console.log(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchDataAndSetCharacters();\n  }, [pageNo]);\n\n const next= ()=>{\n    let tmp_pageNo=pageNo +1;\n    setPageNo(tmp_pageNo);\n    console.log(pageNo);\n  }\n const prev= ()=>{\n  let tmp_pageNo=pageNo -1;\n    setPageNo(tmp_pageNo);\n    console.log(pageNo);\n  }\n  // Fetch characters from the API in an effect hook. Remember, anytime you have a\n  // side effect in a component, you want to think about which state and/or props it should\n  // sync up with, if any.  \n  //console.log(Characters);\n  return (\n    <div className=\"App\">\n      {Characters.previous &&\n        <button onClick={prev}>PREVIOUS</button>\n      }\n      \n      {Characters.next &&\n        <button onClick={next} >NEXT</button>\n      }\n    \n      <h1 className=\"Header\">Karakterler</h1>\n      { \n      Characters.results &&\n      Characters.results.map((characters, index) => (\n        <CharacterComponent key={index} CharacterData={characters} />\n      )) }\n    </div>\n  );\n};\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,kBAAkB,MAAM,oCAAoC;AACnE,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,IAAI,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvC;EACA;EACAC,SAAS,CAAC,MAAM;IAGd,MAAMW,yBAAyB,GAAG,MAAAA,CAAA,KAAY;MAC5C,IAAI;QACFC,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;QACnB,MAAMK,IAAI,GAAG,MAAMZ,YAAY,CAACa,SAAS,CAACN,MAAM,CAAC;QACjDG,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;QACzB;AACA;AACA;AACA;AACA;AACA;QACQN,aAAa,CAACM,IAAI,CAAC;QACpB;MACD,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEG,KAAK,CAAC;MAC5C;IACF,CAAC;IAEDL,yBAAyB,CAAC,CAAC;EAC7B,CAAC,EAAE,CAACF,MAAM,CAAC,CAAC;EAEb,MAAMQ,IAAI,GAAEA,CAAA,KAAI;IACb,IAAIC,UAAU,GAACT,MAAM,GAAE,CAAC;IACxBC,SAAS,CAACQ,UAAU,CAAC;IACrBN,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;EACrB,CAAC;EACF,MAAMU,IAAI,GAAEA,CAAA,KAAI;IACf,IAAID,UAAU,GAACT,MAAM,GAAE,CAAC;IACtBC,SAAS,CAACQ,UAAU,CAAC;IACrBN,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;EACrB,CAAC;EACD;EACA;EACA;EACA;EACA,oBACEL,OAAA;IAAKgB,SAAS,EAAC,KAAK;IAAAC,QAAA,GACjBd,UAAU,CAACe,QAAQ,iBAClBlB,OAAA;MAAQmB,OAAO,EAAEJ,IAAK;MAAAE,QAAA,EAAC;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGzCpB,UAAU,CAACU,IAAI,iBACdb,OAAA;MAAQmB,OAAO,EAAEN,IAAK;MAAAI,QAAA,EAAE;IAAI;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAGvCvB,OAAA;MAAIgB,SAAS,EAAC,QAAQ;MAAAC,QAAA,EAAC;IAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEvCpB,UAAU,CAACqB,OAAO,IAClBrB,UAAU,CAACqB,OAAO,CAACC,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,kBACvC3B,OAAA,CAACH,kBAAkB;MAAa+B,aAAa,EAAEF;IAAW,GAAjCC,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA8B,CAC7D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACrB,EAAA,CA9DID,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AA+DT,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}